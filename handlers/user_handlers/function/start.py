from misc import bot, dp
from aiogram import types
from handlers.user_handlers.helpers.generation_keyboard import UserGenerationKeyboard

import COVID19Py
from covid import Covid

covid = Covid()
covid19 = COVID19Py.COVID19()




@dp.message_handler(commands = ['start'])
async def start(message:types.Message):
    await message.answer(f"*–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}\!*\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:", parse_mode='MarkdownV2', reply_markup=UserGenerationKeyboard.country_buttons())



@dp.message_handler(text = '–í–µ—Å—å –º–∏—Äüåé')
async def world_info(message:types.Message):
    keyboard = UserGenerationKeyboard.country_buttons()
    confirmed = covid.get_total_confirmed_cases()
    deaths = covid.get_total_deaths()
    recovered = covid.get_total_recovered()
    final_message = final_message = f"<b>–î–∞–Ω–Ω—ã–µ –ø–æ –≤—Å–µ–º—É –º–∏—Ä—Éüåé:</b>\nü¶†–ó–∞–±–æ–ª–µ–≤—à–∏—Ö: {confirmed:,} <b>—á–µ–ª.</b>\nüßë‚Äç‚öïÔ∏è–í—ã–∑–¥–æ—Ä–æ–≤–µ–ª–æ: {recovered:,} <b>—á–µ–ª.</b>\n‚ò†Ô∏è–°–º–µ—Ç—Ä–µ–π: {deaths:,} <b>—á–µ–ª.</b>"
    await message.answer(final_message, reply_markup=keyboard, parse_mode='HTML')



@dp.message_handler(text = '–£–∫—Ä–∞–∏–Ω–∞üá∫üá¶')
async def ua_info(message:types.Message):
    keyboard = UserGenerationKeyboard.country_buttons()

    ukraine_cases = covid.get_status_by_country_name('ukraine')
    confirmed = ukraine_cases['confirmed']
    deaths = ukraine_cases['deaths']
    recovered = ukraine_cases['recovered']

    location = covid19.getLocationByCountryCode("UA")
    population = location[0]['country_population']
    boleet = round(confirmed*100/population,2)
    umerlo = round(deaths*100/population,3)

    
    line = '-' * 30

    final_message = f"<b>–î–∞–Ω–Ω—ã–µ –≤ –£–∫—Ä–∞–∏–Ω–µüá∫üá¶:</b>\nü¶†–ó–∞–±–æ–ª–µ–≤—à–∏—Ö: {confirmed:,} <b>—á–µ–ª.</b>\nüßë‚Äç‚öïÔ∏è–í—ã–∑–¥–æ—Ä–æ–≤–µ–ª–æ: {recovered:,} <b>—á–µ–ª.</b>\n‚ò†Ô∏è–°–º–µ—Ç—Ä–µ–π: {deaths:,} <b>—á–µ–ª.</b>\n{line}\n–ù–∞—Å–µ–ª–µ–Ω–∏–µ: {population:,} —á–µ–ª.\n–ë–æ–ª–µ–µ—Ç: {boleet}% –Ω–∞—Å–µ–ª–µ–Ω–∏—è\n–£–º–µ—Ä–ª–æ: {umerlo}% –Ω–∞—Å–µ–ª–µ–Ω–∏—è"


    await message.answer(final_message, reply_markup=keyboard, parse_mode='HTML')



@dp.message_handler(text = '–†–æ—Å—Å–∏—èüá∑üá∫')
async def ru_info(message:types.Message):
    keyboard = UserGenerationKeyboard.country_buttons()
    ukraine_cases = covid.get_status_by_country_name('russia')
    confirmed = ukraine_cases['confirmed']
    deaths = ukraine_cases['deaths']
    recovered = ukraine_cases['recovered']

    location = covid19.getLocationByCountryCode("RU")
    population = location[0]['country_population']
    boleet = round(confirmed*100/population,2)
    umerlo = round(deaths*100/population,3)

    
    line = '-' * 30

    final_message = f"<b>–î–∞–Ω–Ω—ã–µ –≤ –†–æ—Å—Å–∏–∏üá∑üá∫:</b>\nü¶†–ó–∞–±–æ–ª–µ–≤—à–∏—Ö: {confirmed:,} <b>—á–µ–ª.</b>\nüßë‚Äç‚öïÔ∏è–í—ã–∑–¥–æ—Ä–æ–≤–µ–ª–æ: {recovered:,} <b>—á–µ–ª.</b>\n‚ò†Ô∏è–°–º–µ—Ç—Ä–µ–π: {deaths:,} <b>—á–µ–ª.</b>\n{line}\n–ù–∞—Å–µ–ª–µ–Ω–∏–µ: {population:,} —á–µ–ª.\n–ë–æ–ª–µ–µ—Ç: {boleet}% –Ω–∞—Å–µ–ª–µ–Ω–∏—è\n–£–º–µ—Ä–ª–æ: {umerlo}% –Ω–∞—Å–µ–ª–µ–Ω–∏—è"


    await message.answer(final_message, reply_markup=keyboard, parse_mode='HTML')


@dp.message_handler(text = '–ë–µ–ª–∞—Ä—É—Å—å‚¨úÔ∏èüü•‚¨úÔ∏è')
async def by_info(message:types.Message):
    keyboard = UserGenerationKeyboard.country_buttons()
    ukraine_cases = covid.get_status_by_country_name('belarus')
    confirmed = ukraine_cases['confirmed']
    deaths = ukraine_cases['deaths']
    recovered = ukraine_cases['recovered']

    location = covid19.getLocationByCountryCode("BY")
    population = location[0]['country_population']
    boleet = round(confirmed*100/population,2)
    umerlo = round(deaths*100/population,3)

    
    line = '-' * 30

    final_message = f"<b>–î–∞–Ω–Ω—ã–µ –≤ –ë–µ–ª–∞—Ä—É—Å–∏‚¨úÔ∏èüü•‚¨úÔ∏è:</b>\nü¶†–ó–∞–±–æ–ª–µ–≤—à–∏—Ö: {confirmed:,} <b>—á–µ–ª.</b>\nüßë‚Äç‚öïÔ∏è–í—ã–∑–¥–æ—Ä–æ–≤–µ–ª–æ: {recovered:,} <b>—á–µ–ª.</b>\n‚ò†Ô∏è–°–º–µ—Ç—Ä–µ–π: {deaths:,} <b>—á–µ–ª.</b>\n{line}\n–ù–∞—Å–µ–ª–µ–Ω–∏–µ: {population:,} —á–µ–ª.\n–ë–æ–ª–µ–µ—Ç: {boleet}% –Ω–∞—Å–µ–ª–µ–Ω–∏—è\n–£–º–µ—Ä–ª–æ: {umerlo}% –Ω–∞—Å–µ–ª–µ–Ω–∏—è"


    await message.answer(final_message, reply_markup=keyboard, parse_mode='HTML')


@dp.message_handler(text = '–û—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã')
async def other_countries(message:types.Message):
    keyboard = UserGenerationKeyboard.other_countries()

    final_message='–í—ã–±–µ—Ä–∏—Ç–µ <b>–∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç</b>:'
    await message.answer(final_message, reply_markup=keyboard, parse_mode='HTML')


@dp.message_handler(text = 'üîô–ù–∞–∑–∞–¥')
async def back(message:types.Message):
    keyboard = UserGenerationKeyboard.country_buttons()
    final_message = '–í—ã–±–µ—Ä–∏—Ç–µ <b>—Å—Ç—Ä–∞–Ω—É</b>!'
    await message.answer(final_message, reply_markup=keyboard, parse_mode='HTML')

@dp.message_handler(text = 'üîô–û—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã')
async def backk(message:types.Message):
    keyboard = UserGenerationKeyboard.other_countries()
    final_message = '–í—ã–±–µ—Ä–∏—Ç–µ <b>–∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç</b>!'
    await message.answer(final_message, reply_markup=keyboard, parse_mode='HTML')


@dp.message_handler(text = 'üîô–†–µ–≥–∏–æ–Ω—ã –ï–≤—Ä–æ–ø—ã')
async def backkk(message:types.Message):
    keyboard = UserGenerationKeyboard.europe_countries()
    final_message = '–í—ã–±–µ—Ä–∏—Ç–µ <b>—Ä–µ–≥–∏–æ–Ω</b>!'
    await message.answer(final_message, reply_markup=keyboard, parse_mode='HTML')

@dp.message_handler(text = 'üîô–†–µ–≥–∏–æ–Ω—ã –ê–∑–∏–∏')
async def backkkk(message:types.Message):
    keyboard = UserGenerationKeyboard.asian_countries()
    final_message = '–í—ã–±–µ—Ä–∏—Ç–µ <b>—Ä–µ–≥–∏–æ–Ω</b>!'
    await message.answer(final_message, reply_markup=keyboard, parse_mode='HTML')

@dp.message_handler(text = 'üîô–†–µ–≥–∏–æ–Ω—ã –ê—Ñ—Ä–∏–∫–∏')
async def backkkkk(message:types.Message):
    keyboard = UserGenerationKeyboard.african_countries()
    final_message = '–í—ã–±–µ—Ä–∏—Ç–µ <b>—Ä–µ–≥–∏–æ–Ω</b>!'
    await message.answer(final_message, reply_markup=keyboard, parse_mode='HTML')


@dp.message_handler(text = 'üîô–†–µ–≥–∏–æ–Ω—ã –ê–º–µ—Ä–∏–∫–∏')
async def backkkkkk(message:types.Message):
    keyboard = UserGenerationKeyboard.american_countries()
    final_message = '–í—ã–±–µ—Ä–∏—Ç–µ <b>—Ä–µ–≥–∏–æ–Ω</b>!'
    await message.answer(final_message, reply_markup=keyboard, parse_mode='HTML')







@dp.message_handler(text = '–ï–≤—Ä–æ–ø–∞')
async def europe(message:types.Message):
    keyboard = UserGenerationKeyboard.europe_countries()

    final_message = '–í—ã–±–µ—Ä–∏—Ç–µ <b>—Ä–µ–≥–∏–æ–Ω</b>:'
    await message.answer(final_message, reply_markup=keyboard, parse_mode='HTML')

@dp.message_handler(text = '–ê–∑–∏—è')
async def asia(message:types.Message):
    keyboard = UserGenerationKeyboard.asian_countries()

    final_message = '–í—ã–±–µ—Ä–∏—Ç–µ <b>—Ä–µ–≥–∏–æ–Ω</b>:'
    await message.answer(final_message, reply_markup=keyboard, parse_mode='HTML')

@dp.message_handler(text = '–ê—Ñ—Ä–∏–∫–∞')
async def africa(message:types.Message):
    keyboard = UserGenerationKeyboard.african_countries()

    final_message = '–í—ã–±–µ—Ä–∏—Ç–µ <b>—Ä–µ–≥–∏–æ–Ω</b>:'
    await message.answer(final_message, reply_markup=keyboard, parse_mode='HTML')

@dp.message_handler(text = '–ê–º–µ—Ä–∏–∫–∞')
async def america(message:types.Message):
    keyboard = UserGenerationKeyboard.american_countries()

    final_message = '–í—ã–±–µ—Ä–∏—Ç–µ <b>—Ä–µ–≥–∏–æ–Ω</b>:'
    await message.answer(final_message, reply_markup=keyboard, parse_mode='HTML')

