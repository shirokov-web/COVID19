from misc import bot, dp
from aiogram import types
from handlers.user_handlers.helpers.generation_keyboard import UserGenerationKeyboard

import COVID19Py
from covid import Covid

covid = Covid()
covid19 = COVID19Py.COVID19()

@dp.message_handler(text = '–í–æ—Å—Ç–æ—á–Ω–∞—è –ï–≤—Ä–æ–ø–∞')
async def east_europe(message:types.Message):
    keyboard = UserGenerationKeyboard.east_europe()

    final_message = '–í—ã–±–µ—Ä–∏—Ç–µ <b>—Å—Ç—Ä–∞–Ω—É</b>:'
    await message.answer(final_message, reply_markup=keyboard, parse_mode='HTML')



@dp.message_handler(text = '–ß–µ—Ö–∏—èüá®üáø')
async def cz_info(message:types.Message):
    ukraine_cases = covid.get_status_by_country_name('Czechia')
    confirmed = ukraine_cases['confirmed']
    deaths = ukraine_cases['deaths']
    recovered = ukraine_cases['recovered']

    location = covid19.getLocationByCountryCode("CZ")
    population = location[0]['country_population']
    boleet = round(confirmed*100/population,2)
    umerlo = round(deaths*100/population,3)

    
    line = '-' * 30

    final_message = f"<b>–î–∞–Ω–Ω—ã–µ –≤ –ß–µ—Ö–∏–∏üá®üáø:</b>\nü¶†–ó–∞–±–æ–ª–µ–≤—à–∏—Ö: {confirmed:,} <b>—á–µ–ª.</b>\nüßë‚Äç‚öïÔ∏è–í—ã–∑–¥–æ—Ä–æ–≤–µ–ª–æ: {recovered:,} <b>—á–µ–ª.</b>\n‚ò†Ô∏è–°–º–µ—Ç—Ä–µ–π: {deaths:,} <b>—á–µ–ª.</b>\n{line}\n–ù–∞—Å–µ–ª–µ–Ω–∏–µ: {population:,} —á–µ–ª.\n–ë–æ–ª–µ–µ—Ç: {boleet}% –Ω–∞—Å–µ–ª–µ–Ω–∏—è\n–£–º–µ—Ä–ª–æ: {umerlo}% –Ω–∞—Å–µ–ª–µ–Ω–∏—è"


    await message.answer(final_message, parse_mode='HTML')

@dp.message_handler(text = '–ë–æ–ª–≥–∞—Ä–∏—èüáßüá¨')
async def bg_info(message:types.Message):
    ukraine_cases = covid.get_status_by_country_name('Bulgaria')
    confirmed = ukraine_cases['confirmed']
    deaths = ukraine_cases['deaths']
    recovered = ukraine_cases['recovered']

    location = covid19.getLocationByCountryCode("BG")
    population = location[0]['country_population']
    boleet = round(confirmed*100/population,2)
    umerlo = round(deaths*100/population,3)

    
    line = '-' * 30

    final_message = f"<b>–î–∞–Ω–Ω—ã–µ –≤ –ë–æ–ª–≥–∞—Ä–∏–∏üáßüá¨:</b>\nü¶†–ó–∞–±–æ–ª–µ–≤—à–∏—Ö: {confirmed:,} <b>—á–µ–ª.</b>\nüßë‚Äç‚öïÔ∏è–í—ã–∑–¥–æ—Ä–æ–≤–µ–ª–æ: {recovered:,} <b>—á–µ–ª.</b>\n‚ò†Ô∏è–°–º–µ—Ç—Ä–µ–π: {deaths:,} <b>—á–µ–ª.</b>\n{line}\n–ù–∞—Å–µ–ª–µ–Ω–∏–µ: {population:,} —á–µ–ª.\n–ë–æ–ª–µ–µ—Ç: {boleet}% –Ω–∞—Å–µ–ª–µ–Ω–∏—è\n–£–º–µ—Ä–ª–æ: {umerlo}% –Ω–∞—Å–µ–ª–µ–Ω–∏—è"


    await message.answer(final_message, parse_mode='HTML')

@dp.message_handler(text = '–í–µ–Ω–≥—Ä–∏—èüá≠üá∫')
async def hu_info(message:types.Message):
    ukraine_cases = covid.get_status_by_country_name('Hungary')
    confirmed = ukraine_cases['confirmed']
    deaths = ukraine_cases['deaths']
    recovered = ukraine_cases['recovered']

    location = covid19.getLocationByCountryCode("HU")
    population = location[0]['country_population']
    boleet = round(confirmed*100/population,2)
    umerlo = round(deaths*100/population,3)

    
    line = '-' * 30

    final_message = f"<b>–î–∞–Ω–Ω—ã–µ –≤ –í–µ–Ω–≥—Ä–∏–∏üá≠üá∫:</b>\nü¶†–ó–∞–±–æ–ª–µ–≤—à–∏—Ö: {confirmed:,} <b>—á–µ–ª.</b>\nüßë‚Äç‚öïÔ∏è–í—ã–∑–¥–æ—Ä–æ–≤–µ–ª–æ: {recovered:,} <b>—á–µ–ª.</b>\n‚ò†Ô∏è–°–º–µ—Ç—Ä–µ–π: {deaths:,} <b>—á–µ–ª.</b>\n{line}\n–ù–∞—Å–µ–ª–µ–Ω–∏–µ: {population:,} —á–µ–ª.\n–ë–æ–ª–µ–µ—Ç: {boleet}% –Ω–∞—Å–µ–ª–µ–Ω–∏—è\n–£–º–µ—Ä–ª–æ: {umerlo}% –Ω–∞—Å–µ–ª–µ–Ω–∏—è"


    await message.answer(final_message, parse_mode='HTML')

@dp.message_handler(text = '–ú–æ–ª–¥–∞–≤–∏—èüá≤üá©')
async def md_info(message:types.Message):
    ukraine_cases = covid.get_status_by_country_name('Moldova')
    confirmed = ukraine_cases['confirmed']
    deaths = ukraine_cases['deaths']
    recovered = ukraine_cases['recovered']

    location = covid19.getLocationByCountryCode("MD")
    population = location[0]['country_population']
    boleet = round(confirmed*100/population,2)
    umerlo = round(deaths*100/population,3)

    
    line = '-' * 30

    final_message = f"<b>–î–∞–Ω–Ω—ã–µ –≤ –ú–æ–ª–¥–∞–≤–∏–∏üá≤üá©:</b>\nü¶†–ó–∞–±–æ–ª–µ–≤—à–∏—Ö: {confirmed:,} <b>—á–µ–ª.</b>\nüßë‚Äç‚öïÔ∏è–í—ã–∑–¥–æ—Ä–æ–≤–µ–ª–æ: {recovered:,} <b>—á–µ–ª.</b>\n‚ò†Ô∏è–°–º–µ—Ç—Ä–µ–π: {deaths:,} <b>—á–µ–ª.</b>\n{line}\n–ù–∞—Å–µ–ª–µ–Ω–∏–µ: {population:,} —á–µ–ª.\n–ë–æ–ª–µ–µ—Ç: {boleet}% –Ω–∞—Å–µ–ª–µ–Ω–∏—è\n–£–º–µ—Ä–ª–æ: {umerlo}% –Ω–∞—Å–µ–ª–µ–Ω–∏—è"


    await message.answer(final_message, parse_mode='HTML')

@dp.message_handler(text = '–ü–æ–ª—å—à–∞üáµüá±')
async def pl_info(message:types.Message):
    ukraine_cases = covid.get_status_by_country_name('Poland')
    confirmed = ukraine_cases['confirmed']
    deaths = ukraine_cases['deaths']
    recovered = ukraine_cases['recovered']

    location = covid19.getLocationByCountryCode("PL")
    population = location[0]['country_population']
    boleet = round(confirmed*100/population,2)
    umerlo = round(deaths*100/population,3)

    
    line = '-' * 30

    final_message = f"<b>–î–∞–Ω–Ω—ã–µ –≤ –ü–æ–ª—å—à–µüáµüá±:</b>\nü¶†–ó–∞–±–æ–ª–µ–≤—à–∏—Ö: {confirmed:,} <b>—á–µ–ª.</b>\nüßë‚Äç‚öïÔ∏è–í—ã–∑–¥–æ—Ä–æ–≤–µ–ª–æ: {recovered:,} <b>—á–µ–ª.</b>\n‚ò†Ô∏è–°–º–µ—Ç—Ä–µ–π: {deaths:,} <b>—á–µ–ª.</b>\n{line}\n–ù–∞—Å–µ–ª–µ–Ω–∏–µ: {population:,} —á–µ–ª.\n–ë–æ–ª–µ–µ—Ç: {boleet}% –Ω–∞—Å–µ–ª–µ–Ω–∏—è\n–£–º–µ—Ä–ª–æ: {umerlo}% –Ω–∞—Å–µ–ª–µ–Ω–∏—è"


    await message.answer(final_message, parse_mode='HTML')

@dp.message_handler(text = '–†—É–º—ã–Ω–∏—èüá∑üá¥')
async def ro_info(message:types.Message):
    ukraine_cases = covid.get_status_by_country_name('Romania')
    confirmed = ukraine_cases['confirmed']
    deaths = ukraine_cases['deaths']
    recovered = ukraine_cases['recovered']

    location = covid19.getLocationByCountryCode("RO")
    population = location[0]['country_population']
    boleet = round(confirmed*100/population,2)
    umerlo = round(deaths*100/population,3)

    
    line = '-' * 30

    final_message = f"<b>–î–∞–Ω–Ω—ã–µ –≤ –†—É–º—ã–Ω–∏–∏üá∑üá¥:</b>\nü¶†–ó–∞–±–æ–ª–µ–≤—à–∏—Ö: {confirmed:,} <b>—á–µ–ª.</b>\nüßë‚Äç‚öïÔ∏è–í—ã–∑–¥–æ—Ä–æ–≤–µ–ª–æ: {recovered:,} <b>—á–µ–ª.</b>\n‚ò†Ô∏è–°–º–µ—Ç—Ä–µ–π: {deaths:,} <b>—á–µ–ª.</b>\n{line}\n–ù–∞—Å–µ–ª–µ–Ω–∏–µ: {population:,} —á–µ–ª.\n–ë–æ–ª–µ–µ—Ç: {boleet}% –Ω–∞—Å–µ–ª–µ–Ω–∏—è\n–£–º–µ—Ä–ª–æ: {umerlo}% –Ω–∞—Å–µ–ª–µ–Ω–∏—è"


    await message.answer(final_message, parse_mode='HTML')

@dp.message_handler(text = '–°–ª–æ–≤–∞–∫–∏—èüá∏üá∞')
async def sk_info(message:types.Message):
    ukraine_cases = covid.get_status_by_country_name('Slovakia')
    confirmed = ukraine_cases['confirmed']
    deaths = ukraine_cases['deaths']
    recovered = ukraine_cases['recovered']

    location = covid19.getLocationByCountryCode("SK")
    population = location[0]['country_population']
    boleet = round(confirmed*100/population,2)
    umerlo = round(deaths*100/population,3)

    
    line = '-' * 30

    final_message = f"<b>–î–∞–Ω–Ω—ã–µ –≤ –°–ª–æ–≤–∞–∫–∏–∏üá∏üá∞:</b>\nü¶†–ó–∞–±–æ–ª–µ–≤—à–∏—Ö: {confirmed:,} <b>—á–µ–ª.</b>\nüßë‚Äç‚öïÔ∏è–í—ã–∑–¥–æ—Ä–æ–≤–µ–ª–æ: {recovered:,} <b>—á–µ–ª.</b>\n‚ò†Ô∏è–°–º–µ—Ç—Ä–µ–π: {deaths:,} <b>—á–µ–ª.</b>\n{line}\n–ù–∞—Å–µ–ª–µ–Ω–∏–µ: {population:,} —á–µ–ª.\n–ë–æ–ª–µ–µ—Ç: {boleet}% –Ω–∞—Å–µ–ª–µ–Ω–∏—è\n–£–º–µ—Ä–ª–æ: {umerlo}% –Ω–∞—Å–µ–ª–µ–Ω–∏—è"


    await message.answer(final_message, parse_mode='HTML')
