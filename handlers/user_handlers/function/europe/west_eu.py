from misc import bot, dp
from aiogram import types
from handlers.user_handlers.helpers.generation_keyboard import UserGenerationKeyboard

import COVID19Py
from covid import Covid

covid = Covid()
covid19 = COVID19Py.COVID19()

@dp.message_handler(text = '–ó–∞–ø–∞–¥–Ω–∞—è –ï–≤—Ä–æ–ø–∞')
async def west_europe(message:types.Message):
    keyboard = UserGenerationKeyboard.west_europe()

    final_message = '–í—ã–±–µ—Ä–∏—Ç–µ <b>—Å—Ç—Ä–∞–Ω—É</b>:'
    await message.answer(final_message, reply_markup=keyboard, parse_mode='HTML')

@dp.message_handler(text = '–ê–≤—Å—Ç—Ä–∏—èüá¶üáπ')
async def at_info(message:types.Message):
    ukraine_cases = covid.get_status_by_country_name('Austria')
    confirmed = ukraine_cases['confirmed']
    deaths = ukraine_cases['deaths']
    recovered = ukraine_cases['recovered']

    location = covid19.getLocationByCountryCode("AT")
    population = location[0]['country_population']
    boleet = round(confirmed*100/population,2)
    umerlo = round(deaths*100/population,3)

    
    line = '-' * 30

    final_message = f"<b>–î–∞–Ω–Ω—ã–µ –≤ –ê–≤—Å—Ç—Ä–∏–∏üá¶üáπ:</b>\nü¶†–ó–∞–±–æ–ª–µ–≤—à–∏—Ö: {confirmed:,} <b>—á–µ–ª.</b>\nüßë‚Äç‚öïÔ∏è–í—ã–∑–¥–æ—Ä–æ–≤–µ–ª–æ: {recovered:,} <b>—á–µ–ª.</b>\n‚ò†Ô∏è–°–º–µ—Ç—Ä–µ–π: {deaths:,} <b>—á–µ–ª.</b>\n{line}\n–ù–∞—Å–µ–ª–µ–Ω–∏–µ: {population:,} —á–µ–ª.\n–ë–æ–ª–µ–µ—Ç: {boleet}% –Ω–∞—Å–µ–ª–µ–Ω–∏—è\n–£–º–µ—Ä–ª–æ: {umerlo}% –Ω–∞—Å–µ–ª–µ–Ω–∏—è"


    await message.answer(final_message, parse_mode='HTML')

@dp.message_handler(text = '–ë–µ–ª—å–≥–∏—èüáßüá™')
async def be_info(message:types.Message):
    ukraine_cases = covid.get_status_by_country_name('Belgium')
    confirmed = ukraine_cases['confirmed']
    deaths = ukraine_cases['deaths']
    recovered = ukraine_cases['recovered']

    location = covid19.getLocationByCountryCode("BE")
    population = location[0]['country_population']
    boleet = round(confirmed*100/population,2)
    umerlo = round(deaths*100/population,3)

    
    line = '-' * 30
    if recovered==None:
        final_message = f"<b>–î–∞–Ω–Ω—ã–µ –≤ –ë–µ–ª—å–≥–∏–∏üáßüá™:</b>\nü¶†–ó–∞–±–æ–ª–µ–≤—à–∏—Ö: {confirmed:,} <b>—á–µ–ª.</b>\nüßë‚Äç‚öïÔ∏è–í—ã–∑–¥–æ—Ä–æ–≤–µ–ª–æ: <i>–ù–µ—Ç —Ç–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.</i>\n‚ò†Ô∏è–°–º–µ—Ç—Ä–µ–π: {deaths:,} <b>—á–µ–ª.</b>\n{line}\n–ù–∞—Å–µ–ª–µ–Ω–∏–µ: {population:,} —á–µ–ª.\n–ë–æ–ª–µ–µ—Ç: {boleet}% –Ω–∞—Å–µ–ª–µ–Ω–∏—è\n–£–º–µ—Ä–ª–æ: {umerlo}% –Ω–∞—Å–µ–ª–µ–Ω–∏—è"
    else:
        final_message = f"<b>–î–∞–Ω–Ω—ã–µ –≤ –ë–µ–ª—å–≥–∏–∏üáßüá™:</b>\nü¶†–ó–∞–±–æ–ª–µ–≤—à–∏—Ö: {confirmed:,} <b>—á–µ–ª.</b>\nüßë‚Äç‚öïÔ∏è–í—ã–∑–¥–æ—Ä–æ–≤–µ–ª–æ: {recovered:,} <b>—á–µ–ª.</b>\n‚ò†Ô∏è–°–º–µ—Ç—Ä–µ–π: {deaths:,} <b>—á–µ–ª.</b>\n{line}\n–ù–∞—Å–µ–ª–µ–Ω–∏–µ: {population:,} —á–µ–ª.\n–ë–æ–ª–µ–µ—Ç: {boleet}% –Ω–∞—Å–µ–ª–µ–Ω–∏—è\n–£–º–µ—Ä–ª–æ: {umerlo}% –Ω–∞—Å–µ–ª–µ–Ω–∏—è"


    await message.answer(final_message, parse_mode='HTML')

@dp.message_handler(text = '–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—èüá¨üáß')
async def gb_info(message:types.Message):
    ukraine_cases = covid.get_status_by_country_name('United Kingdom')
    confirmed = ukraine_cases['confirmed']
    deaths = ukraine_cases['deaths']
    recovered = ukraine_cases['recovered']

    location = covid19.getLocationByCountryCode("GB")
    population = location[0]['country_population']
    boleet = round(confirmed*100/population,2)
    umerlo = round(deaths*100/population,3)

    
    line = '-' * 30

    final_message = f"<b>–î–∞–Ω–Ω—ã–µ –≤ –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏–∏üá¨üáß:</b>\nü¶†–ó–∞–±–æ–ª–µ–≤—à–∏—Ö: {confirmed:,} <b>—á–µ–ª.</b>\nüßë‚Äç‚öïÔ∏è–í—ã–∑–¥–æ—Ä–æ–≤–µ–ª–æ: {recovered:,} <b>—á–µ–ª.</b>\n‚ò†Ô∏è–°–º–µ—Ç—Ä–µ–π: {deaths:,} <b>—á–µ–ª.</b>\n{line}\n–ù–∞—Å–µ–ª–µ–Ω–∏–µ: {population:,} —á–µ–ª.\n–ë–æ–ª–µ–µ—Ç: {boleet}% –Ω–∞—Å–µ–ª–µ–Ω–∏—è\n–£–º–µ—Ä–ª–æ: {umerlo}% –Ω–∞—Å–µ–ª–µ–Ω–∏—è"


    await message.answer(final_message, parse_mode='HTML')

@dp.message_handler(text = '–ì–µ—Ä–º–∞–Ω–∏—èüá©üá™')
async def de_info(message:types.Message):
    ukraine_cases = covid.get_status_by_country_name('Germany')
    confirmed = ukraine_cases['confirmed']
    deaths = ukraine_cases['deaths']
    recovered = ukraine_cases['recovered']

    location = covid19.getLocationByCountryCode("DE")
    population = location[0]['country_population']
    boleet = round(confirmed*100/population,2)
    umerlo = round(deaths*100/population,3)

    
    line = '-' * 30

    final_message = f"<b>–î–∞–Ω–Ω—ã–µ –≤ –ì–µ—Ä–º–∞–Ω–∏–∏üá©üá™:</b>\nü¶†–ó–∞–±–æ–ª–µ–≤—à–∏—Ö: {confirmed:,} <b>—á–µ–ª.</b>\nüßë‚Äç‚öïÔ∏è–í—ã–∑–¥–æ—Ä–æ–≤–µ–ª–æ: {recovered:,} <b>—á–µ–ª.</b>\n‚ò†Ô∏è–°–º–µ—Ç—Ä–µ–π: {deaths:,} <b>—á–µ–ª.</b>\n{line}\n–ù–∞—Å–µ–ª–µ–Ω–∏–µ: {population:,} —á–µ–ª.\n–ë–æ–ª–µ–µ—Ç: {boleet}% –Ω–∞—Å–µ–ª–µ–Ω–∏—è\n–£–º–µ—Ä–ª–æ: {umerlo}% –Ω–∞—Å–µ–ª–µ–Ω–∏—è"


    await message.answer(final_message, parse_mode='HTML')

@dp.message_handler(text = '–ò—Ä–ª–∞–Ω–¥–∏—èüáÆüá™')
async def ie_info(message:types.Message):
    ukraine_cases = covid.get_status_by_country_name('Ireland')
    confirmed = ukraine_cases['confirmed']
    deaths = ukraine_cases['deaths']
    recovered = ukraine_cases['recovered']

    location = covid19.getLocationByCountryCode("IE")
    population = location[0]['country_population']
    boleet = round(confirmed*100/population,2)
    umerlo = round(deaths*100/population,3)

    
    line = '-' * 30

    final_message = f"<b>–î–∞–Ω–Ω—ã–µ –≤ –ò—Ä–ª–∞–Ω–¥–∏–∏üáÆüá™:</b>\nü¶†–ó–∞–±–æ–ª–µ–≤—à–∏—Ö: {confirmed:,} <b>—á–µ–ª.</b>\nüßë‚Äç‚öïÔ∏è–í—ã–∑–¥–æ—Ä–æ–≤–µ–ª–æ: {recovered:,} <b>—á–µ–ª.</b>\n‚ò†Ô∏è–°–º–µ—Ç—Ä–µ–π: {deaths:,} <b>—á–µ–ª.</b>\n{line}\n–ù–∞—Å–µ–ª–µ–Ω–∏–µ: {population:,} —á–µ–ª.\n–ë–æ–ª–µ–µ—Ç: {boleet}% –Ω–∞—Å–µ–ª–µ–Ω–∏—è\n–£–º–µ—Ä–ª–æ: {umerlo}% –Ω–∞—Å–µ–ª–µ–Ω–∏—è"


    await message.answer(final_message, parse_mode='HTML')

@dp.message_handler(text = '–õ–∏—Ö—Ç–µ–Ω—à—Ç–µ–π–Ωüá±üáÆ')
async def li_info(message:types.Message):
    ukraine_cases = covid.get_status_by_country_name('Liechtenstein')
    confirmed = ukraine_cases['confirmed']
    deaths = ukraine_cases['deaths']
    recovered = ukraine_cases['recovered']

    location = covid19.getLocationByCountryCode("LI")
    population = location[0]['country_population']
    boleet = round(confirmed*100/population,2)
    umerlo = round(deaths*100/population,3)

    
    line = '-' * 30

    final_message = f"<b>–î–∞–Ω–Ω—ã–µ –≤ –õ–∏—Ö—Ç–µ–Ω—à—Ç–µ–π–Ω–µüá±üáÆ:</b>\nü¶†–ó–∞–±–æ–ª–µ–≤—à–∏—Ö: {confirmed:,} <b>—á–µ–ª.</b>\nüßë‚Äç‚öïÔ∏è–í—ã–∑–¥–æ—Ä–æ–≤–µ–ª–æ: {recovered:,} <b>—á–µ–ª.</b>\n‚ò†Ô∏è–°–º–µ—Ç—Ä–µ–π: {deaths:,} <b>—á–µ–ª.</b>\n{line}\n–ù–∞—Å–µ–ª–µ–Ω–∏–µ: {population:,} —á–µ–ª.\n–ë–æ–ª–µ–µ—Ç: {boleet}% –Ω–∞—Å–µ–ª–µ–Ω–∏—è\n–£–º–µ—Ä–ª–æ: {umerlo}% –Ω–∞—Å–µ–ª–µ–Ω–∏—è"


    await message.answer(final_message, parse_mode='HTML')

@dp.message_handler(text = '–õ—é–∫—Å–µ–º–±—É—Ä–≥üá±üá∫')
async def lu_info(message:types.Message):
    ukraine_cases = covid.get_status_by_country_name('Luxembourg')
    confirmed = ukraine_cases['confirmed']
    deaths = ukraine_cases['deaths']
    recovered = ukraine_cases['recovered']

    location = covid19.getLocationByCountryCode("LU")
    population = location[0]['country_population']
    boleet = round(confirmed*100/population,2)
    umerlo = round(deaths*100/population,3)

    
    line = '-' * 30

    final_message = f"<b>–î–∞–Ω–Ω—ã–µ –≤ –õ—é–∫—Å–µ–º–±—É—Ä–≥–µüá±üá∫:</b>\nü¶†–ó–∞–±–æ–ª–µ–≤—à–∏—Ö: {confirmed:,} <b>—á–µ–ª.</b>\nüßë‚Äç‚öïÔ∏è–í—ã–∑–¥–æ—Ä–æ–≤–µ–ª–æ: {recovered:,} <b>—á–µ–ª.</b>\n‚ò†Ô∏è–°–º–µ—Ç—Ä–µ–π: {deaths:,} <b>—á–µ–ª.</b>\n{line}\n–ù–∞—Å–µ–ª–µ–Ω–∏–µ: {population:,} —á–µ–ª.\n–ë–æ–ª–µ–µ—Ç: {boleet}% –Ω–∞—Å–µ–ª–µ–Ω–∏—è\n–£–º–µ—Ä–ª–æ: {umerlo}% –Ω–∞—Å–µ–ª–µ–Ω–∏—è"


    await message.answer(final_message, parse_mode='HTML')

@dp.message_handler(text = '–ú–æ–Ω–∞–∫–æüá≤üá®')
async def mc_info(message:types.Message):
    ukraine_cases = covid.get_status_by_country_name('Monaco')
    confirmed = ukraine_cases['confirmed']
    deaths = ukraine_cases['deaths']
    recovered = ukraine_cases['recovered']

    location = covid19.getLocationByCountryCode("MC")
    population = location[0]['country_population']
    boleet = round(confirmed*100/population,2)
    umerlo = round(deaths*100/population,3)

    
    line = '-' * 30

    final_message = f"<b>–î–∞–Ω–Ω—ã–µ –≤ –ú–æ–Ω–∞–∫–æüá≤üá®:</b>\nü¶†–ó–∞–±–æ–ª–µ–≤—à–∏—Ö: {confirmed:,} <b>—á–µ–ª.</b>\nüßë‚Äç‚öïÔ∏è–í—ã–∑–¥–æ—Ä–æ–≤–µ–ª–æ: {recovered:,} <b>—á–µ–ª.</b>\n‚ò†Ô∏è–°–º–µ—Ç—Ä–µ–π: {deaths:,} <b>—á–µ–ª.</b>\n{line}\n–ù–∞—Å–µ–ª–µ–Ω–∏–µ: {population:,} —á–µ–ª.\n–ë–æ–ª–µ–µ—Ç: {boleet}% –Ω–∞—Å–µ–ª–µ–Ω–∏—è\n–£–º–µ—Ä–ª–æ: {umerlo}% –Ω–∞—Å–µ–ª–µ–Ω–∏—è"


    await message.answer(final_message, parse_mode='HTML')

@dp.message_handler(text = '–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ãüá≥üá±')
async def nl_info(message:types.Message):
    ukraine_cases = covid.get_status_by_country_name('Netherlands')
    confirmed = ukraine_cases['confirmed']
    deaths = ukraine_cases['deaths']
    recovered = ukraine_cases['recovered']

    location = covid19.getLocationByCountryCode("NL")
    population = location[0]['country_population']
    boleet = round(confirmed*100/population,2)
    umerlo = round(deaths*100/population,3)

    
    line = '-' * 30

    final_message = f"<b>–î–∞–Ω–Ω—ã–µ –≤ –ù–∏–¥–µ—Ä–ª–∞–Ω–¥–∞—Öüá≥üá±:</b>\nü¶†–ó–∞–±–æ–ª–µ–≤—à–∏—Ö: {confirmed:,} <b>—á–µ–ª.</b>\nüßë‚Äç‚öïÔ∏è–í—ã–∑–¥–æ—Ä–æ–≤–µ–ª–æ: {recovered:,} <b>—á–µ–ª.</b>\n‚ò†Ô∏è–°–º–µ—Ç—Ä–µ–π: {deaths:,} <b>—á–µ–ª.</b>\n{line}\n–ù–∞—Å–µ–ª–µ–Ω–∏–µ: {population:,} —á–µ–ª.\n–ë–æ–ª–µ–µ—Ç: {boleet}% –Ω–∞—Å–µ–ª–µ–Ω–∏—è\n–£–º–µ—Ä–ª–æ: {umerlo}% –Ω–∞—Å–µ–ª–µ–Ω–∏—è"


    await message.answer(final_message, parse_mode='HTML')

@dp.message_handler(text = '–§—Ä–∞–Ω—Ü–∏—èüá´üá∑')
async def fr_info(message:types.Message):
    ukraine_cases = covid.get_status_by_country_name('France')
    confirmed = ukraine_cases['confirmed']
    deaths = ukraine_cases['deaths']
    recovered = ukraine_cases['recovered']

    location = covid19.getLocationByCountryCode("FR")
    population = location[0]['country_population']
    boleet = round(confirmed*100/population,2)
    umerlo = round(deaths*100/population,3)

    
    line = '-' * 30

    final_message = f"<b>–î–∞–Ω–Ω—ã–µ –≤ –§—Ä–∞–Ω—Ü–∏–∏üá´üá∑:</b>\nü¶†–ó–∞–±–æ–ª–µ–≤—à–∏—Ö: {confirmed:,} <b>—á–µ–ª.</b>\nüßë‚Äç‚öïÔ∏è–í—ã–∑–¥–æ—Ä–æ–≤–µ–ª–æ: {recovered:,} <b>—á–µ–ª.</b>\n‚ò†Ô∏è–°–º–µ—Ç—Ä–µ–π: {deaths:,} <b>—á–µ–ª.</b>\n{line}\n–ù–∞—Å–µ–ª–µ–Ω–∏–µ: {population:,} —á–µ–ª.\n–ë–æ–ª–µ–µ—Ç: {boleet}% –Ω–∞—Å–µ–ª–µ–Ω–∏—è\n–£–º–µ—Ä–ª–æ: {umerlo}% –Ω–∞—Å–µ–ª–µ–Ω–∏—è"


    await message.answer(final_message, parse_mode='HTML')

@dp.message_handler(text = '–®–≤–µ–π—Ü–∞—Ä–∏—èüá®üá≠')
async def ch_info(message:types.Message):
    ukraine_cases = covid.get_status_by_country_name('Switzerland')
    confirmed = ukraine_cases['confirmed']
    deaths = ukraine_cases['deaths']
    recovered = ukraine_cases['recovered']

    location = covid19.getLocationByCountryCode("CH")
    population = location[0]['country_population']
    boleet = round(confirmed*100/population,2)
    umerlo = round(deaths*100/population,3)

    
    line = '-' * 30

    final_message = f"<b>–î–∞–Ω–Ω—ã–µ –≤ –®–≤–µ–π—Ü–∞—Ä–∏–∏üá®üá≠:</b>\nü¶†–ó–∞–±–æ–ª–µ–≤—à–∏—Ö: {confirmed:,} <b>—á–µ–ª.</b>\nüßë‚Äç‚öïÔ∏è–í—ã–∑–¥–æ—Ä–æ–≤–µ–ª–æ: {recovered:,} <b>—á–µ–ª.</b>\n‚ò†Ô∏è–°–º–µ—Ç—Ä–µ–π: {deaths:,} <b>—á–µ–ª.</b>\n{line}\n–ù–∞—Å–µ–ª–µ–Ω–∏–µ: {population:,} —á–µ–ª.\n–ë–æ–ª–µ–µ—Ç: {boleet}% –Ω–∞—Å–µ–ª–µ–Ω–∏—è\n–£–º–µ—Ä–ª–æ: {umerlo}% –Ω–∞—Å–µ–ª–µ–Ω–∏—è"


    await message.answer(final_message, parse_mode='HTML')

